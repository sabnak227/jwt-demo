// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 8907ffca23
// Version Date: Wed 27 Nov 2019 21:28:21 UTC

// Package http provides an HTTP client for the User service.
package http

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/gogo/protobuf/jsonpb"

	"github.com/go-kit/kit/endpoint"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/pkg/errors"

	// This Service
	pb "github.com/sabnak227/jwt-demo/user"
	"github.com/sabnak227/jwt-demo/user/user-service/svc"
)

var (
	_ = endpoint.Chain
	_ = httptransport.NewClient
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = ioutil.NopCloser
)

// New returns a service backed by an HTTP server living at the remote
// instance. We expect instance to come from a service discovery system, so
// likely of the form "host:port".
func New(instance string, options ...httptransport.ClientOption) (pb.UserServer, error) {

	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}
	u, err := url.Parse(instance)
	if err != nil {
		return nil, err
	}
	_ = u

	var ListUserZeroEndpoint endpoint.Endpoint
	{
		ListUserZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/user"),
			EncodeHTTPListUserZeroRequest,
			DecodeHTTPListUserResponse,
			options...,
		).Endpoint()
	}
	var GetUserZeroEndpoint endpoint.Endpoint
	{
		GetUserZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/user/"),
			EncodeHTTPGetUserZeroRequest,
			DecodeHTTPGetUserResponse,
			options...,
		).Endpoint()
	}
	var CreateUserZeroEndpoint endpoint.Endpoint
	{
		CreateUserZeroEndpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "/user/register"),
			EncodeHTTPCreateUserZeroRequest,
			DecodeHTTPCreateUserResponse,
			options...,
		).Endpoint()
	}
	var UpdateUserZeroEndpoint endpoint.Endpoint
	{
		UpdateUserZeroEndpoint = httptransport.NewClient(
			"PUT",
			copyURL(u, "/user/"),
			EncodeHTTPUpdateUserZeroRequest,
			DecodeHTTPUpdateUserResponse,
			options...,
		).Endpoint()
	}
	var DeleteUserZeroEndpoint endpoint.Endpoint
	{
		DeleteUserZeroEndpoint = httptransport.NewClient(
			"DELETE",
			copyURL(u, "/user/"),
			EncodeHTTPDeleteUserZeroRequest,
			DecodeHTTPDeleteUserResponse,
			options...,
		).Endpoint()
	}

	return svc.Endpoints{
		ListUserEndpoint:   ListUserZeroEndpoint,
		GetUserEndpoint:    GetUserZeroEndpoint,
		CreateUserEndpoint: CreateUserZeroEndpoint,
		UpdateUserEndpoint: UpdateUserZeroEndpoint,
		DeleteUserEndpoint: DeleteUserZeroEndpoint,
	}, nil
}

func copyURL(base *url.URL, path string) *url.URL {
	next := *base
	next.Path = path
	return &next
}

// CtxValuesToSend configures the http client to pull the specified keys out of
// the context and add them to the http request as headers.  Note that keys
// will have net/http.CanonicalHeaderKey called on them before being send over
// the wire and that is the form they will be available in the server context.
func CtxValuesToSend(keys ...string) httptransport.ClientOption {
	return httptransport.ClientBefore(func(ctx context.Context, r *http.Request) context.Context {
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				r.Header.Set(k, v)
			}
		}
		return ctx
	})
}

// HTTP Client Decode

// DecodeHTTPListUserResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded ListUserResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPListUserResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.ListUserResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPGetUserResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded GetUserResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPGetUserResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.GetUserResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPCreateUserResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded CreateUserResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPCreateUserResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.CreateUserResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPUpdateUserResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded UpdateUserResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPUpdateUserResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.UpdateUserResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPDeleteUserResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded DeleteUserResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPDeleteUserResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.DeleteUserResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// HTTP Client Encode

// EncodeHTTPListUserZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a listuser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPListUserZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.ListUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"user",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("offset", fmt.Sprint(req.Offset))

	values.Add("limit", fmt.Sprint(req.Limit))

	values.Add("search", fmt.Sprint(req.Search))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPGetUserZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a getuser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPGetUserZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.GetUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"user",
		fmt.Sprint(req.ID),
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPCreateUserZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a createuser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPCreateUserZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.CreateUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"user",
		"register",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.CreateUserRequest)

	toRet.Password = req.Password

	toRet.FirstName = req.FirstName

	toRet.LastName = req.LastName

	toRet.Email = req.Email

	toRet.Address1 = req.Address1

	toRet.Address2 = req.Address2

	toRet.City = req.City

	toRet.State = req.State

	toRet.Country = req.Country

	toRet.Phone = req.Phone

	toRet.Status = req.Status

	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

// EncodeHTTPCreateUserOneRequest is a transport/http.EncodeRequestFunc
// that encodes a createuser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPCreateUserOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.CreateUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"user",
		"register",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("password", fmt.Sprint(req.Password))

	values.Add("first_name", fmt.Sprint(req.FirstName))

	values.Add("last_name", fmt.Sprint(req.LastName))

	values.Add("email", fmt.Sprint(req.Email))

	values.Add("address1", fmt.Sprint(req.Address1))

	values.Add("address2", fmt.Sprint(req.Address2))

	values.Add("city", fmt.Sprint(req.City))

	values.Add("state", fmt.Sprint(req.State))

	values.Add("country", fmt.Sprint(req.Country))

	values.Add("phone", fmt.Sprint(req.Phone))

	values.Add("status", fmt.Sprint(req.Status))

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.CreateUserRequest)
	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

// EncodeHTTPUpdateUserZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a updateuser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPUpdateUserZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.UpdateUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"user",
		fmt.Sprint(req.ID),
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.UpdateUserRequest)

	toRet.FirstName = req.FirstName

	toRet.LastName = req.LastName

	toRet.Email = req.Email

	toRet.Address1 = req.Address1

	toRet.Address2 = req.Address2

	toRet.City = req.City

	toRet.State = req.State

	toRet.Country = req.Country

	toRet.Phone = req.Phone

	toRet.Status = req.Status

	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

// EncodeHTTPUpdateUserOneRequest is a transport/http.EncodeRequestFunc
// that encodes a updateuser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPUpdateUserOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.UpdateUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"user",
		fmt.Sprint(req.ID),
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("first_name", fmt.Sprint(req.FirstName))

	values.Add("last_name", fmt.Sprint(req.LastName))

	values.Add("email", fmt.Sprint(req.Email))

	values.Add("address1", fmt.Sprint(req.Address1))

	values.Add("address2", fmt.Sprint(req.Address2))

	values.Add("city", fmt.Sprint(req.City))

	values.Add("state", fmt.Sprint(req.State))

	values.Add("country", fmt.Sprint(req.Country))

	values.Add("phone", fmt.Sprint(req.Phone))

	values.Add("status", fmt.Sprint(req.Status))

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.UpdateUserRequest)
	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

// EncodeHTTPDeleteUserZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a deleteuser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPDeleteUserZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.DeleteUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"user",
		fmt.Sprint(req.ID),
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.DeleteUserRequest)
	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

// EncodeHTTPDeleteUserOneRequest is a transport/http.EncodeRequestFunc
// that encodes a deleteuser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPDeleteUserOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.DeleteUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"user",
		fmt.Sprint(req.ID),
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.DeleteUserRequest)
	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

func errorDecoder(buf []byte) error {
	var w errorWrapper
	if err := json.Unmarshal(buf, &w); err != nil {
		const size = 8196
		if len(buf) > size {
			buf = buf[:size]
		}
		return fmt.Errorf("response body '%s': cannot parse non-json request body", buf)
	}

	return errors.New(w.Error)
}

type errorWrapper struct {
	Error string `json:"error"`
}
