// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 8907ffca23
// Version Date: Wed 27 Nov 2019 21:28:21 UTC

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/sabnak227/jwt-demo/auth"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC AuthServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.AuthServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// auth

		jwks: grpctransport.NewServer(
			endpoints.JWKSEndpoint,
			DecodeGRPCJWKSRequest,
			EncodeGRPCJWKSResponse,
			serverOptions...,
		),
		login: grpctransport.NewServer(
			endpoints.LoginEndpoint,
			DecodeGRPCLoginRequest,
			EncodeGRPCLoginResponse,
			serverOptions...,
		),
		createauth: grpctransport.NewServer(
			endpoints.CreateAuthEndpoint,
			DecodeGRPCCreateAuthRequest,
			EncodeGRPCCreateAuthResponse,
			serverOptions...,
		),
		deleteauth: grpctransport.NewServer(
			endpoints.DeleteAuthEndpoint,
			DecodeGRPCDeleteAuthRequest,
			EncodeGRPCDeleteAuthResponse,
			serverOptions...,
		),
		refresh: grpctransport.NewServer(
			endpoints.RefreshEndpoint,
			DecodeGRPCRefreshRequest,
			EncodeGRPCRefreshResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the AuthServer interface
type grpcServer struct {
	jwks       grpctransport.Handler
	login      grpctransport.Handler
	createauth grpctransport.Handler
	deleteauth grpctransport.Handler
	refresh    grpctransport.Handler
}

// Methods for grpcServer to implement AuthServer interface

func (s *grpcServer) JWKS(ctx context.Context, req *pb.JWKSRequest) (*pb.JWKSResponse, error) {
	_, rep, err := s.jwks.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.JWKSResponse), nil
}

func (s *grpcServer) Login(ctx context.Context, req *pb.LoginRequest) (*pb.LoginResponse, error) {
	_, rep, err := s.login.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.LoginResponse), nil
}

func (s *grpcServer) CreateAuth(ctx context.Context, req *pb.CreateAuthRequest) (*pb.CreateAuthResponse, error) {
	_, rep, err := s.createauth.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.CreateAuthResponse), nil
}

func (s *grpcServer) DeleteAuth(ctx context.Context, req *pb.DeleteAuthRequest) (*pb.DeleteAuthResponse, error) {
	_, rep, err := s.deleteauth.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.DeleteAuthResponse), nil
}

func (s *grpcServer) Refresh(ctx context.Context, req *pb.RefreshRequest) (*pb.RefreshResponse, error) {
	_, rep, err := s.refresh.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.RefreshResponse), nil
}

// Server Decode

// DecodeGRPCJWKSRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC jwks request to a user-domain jwks request. Primarily useful in a server.
func DecodeGRPCJWKSRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.JWKSRequest)
	return req, nil
}

// DecodeGRPCLoginRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC login request to a user-domain login request. Primarily useful in a server.
func DecodeGRPCLoginRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.LoginRequest)
	return req, nil
}

// DecodeGRPCCreateAuthRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC createauth request to a user-domain createauth request. Primarily useful in a server.
func DecodeGRPCCreateAuthRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateAuthRequest)
	return req, nil
}

// DecodeGRPCDeleteAuthRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC deleteauth request to a user-domain deleteauth request. Primarily useful in a server.
func DecodeGRPCDeleteAuthRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DeleteAuthRequest)
	return req, nil
}

// DecodeGRPCRefreshRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC refresh request to a user-domain refresh request. Primarily useful in a server.
func DecodeGRPCRefreshRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.RefreshRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCJWKSResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain jwks response to a gRPC jwks reply. Primarily useful in a server.
func EncodeGRPCJWKSResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.JWKSResponse)
	return resp, nil
}

// EncodeGRPCLoginResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain login response to a gRPC login reply. Primarily useful in a server.
func EncodeGRPCLoginResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.LoginResponse)
	return resp, nil
}

// EncodeGRPCCreateAuthResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain createauth response to a gRPC createauth reply. Primarily useful in a server.
func EncodeGRPCCreateAuthResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.CreateAuthResponse)
	return resp, nil
}

// EncodeGRPCDeleteAuthResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain deleteauth response to a gRPC deleteauth reply. Primarily useful in a server.
func EncodeGRPCDeleteAuthResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.DeleteAuthResponse)
	return resp, nil
}

// EncodeGRPCRefreshResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain refresh response to a gRPC refresh reply. Primarily useful in a server.
func EncodeGRPCRefreshResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.RefreshResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
