syntax = "proto3";

package user;

import "github.com/metaverse/truss/deftree/googlethirdparty/annotations.proto";

service User {
  rpc ListUser (ListUserRequest) returns (ListUserResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/users"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/users/"
      }
    };
  }

  rpc GetUser (GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      // id is accepted in the http path
      get: "/users/{id}"
    };
  }

  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      custom {
        kind: "HEAD"
        path: "/users"
      }
      additional_bindings {
        post: "/users"
        // All other fields (In) are located in the body of the http/json request
        body: "*"
      }
    };
  }
  
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      custom {
        kind: "HEAD"
        path: "/users/{id}"
      }
      additional_bindings {
        put: "/users/{id}"
        // All other fields (In) are located in the body of the http/json request
        body: "*"
      }
    };
  }

  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      custom {
        kind: "HEAD"
        path: "/users/{id}"
      }
      additional_bindings {
        delete: "/users/{id}"
      }
    };
  }

  rpc AuthUser (AuthUserRequest) returns (AuthUserResponse) {
    option (google.api.http) = {
      custom {
        kind: "HEAD"
        path: "/users/{id}/auth"
      }
      additional_bindings {
        post: "/users/{id}/auth"
        // All other fields (In) are located in the body of the http/json request
        body: "*"
      }
    };
  }

}



message ListUserRequest {
  int32 last_id = 1;
  int32 size = 3; 
}

message ListUserResponse {
  message User {
    int32 id = 1;
    string first_name = 2;
    string last_name = 3;
    string email = 4;
    string password = 5;
    string address1 = 6;
    string address2 = 7;
    string city = 8;
    string state = 9;
    string country = 10;
    string phone = 11;
  }; 
  int32 code = 1;
  repeated User users = 2;
}

message GetUserRequest {}
message GetUserResponse {
  int32 code = 1;
  int32 id = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
  string password = 6;
  string address1 = 7;
  string address2 = 8;
  string city = 9;
  string state = 10;
  string country = 11;
  string phone = 12;
}

message CreateUserRequest {
  string first_name = 1;
  string last_name = 2;
  string email = 3;
  string password = 4;
  string address1 = 5;
  string address2 = 6;
  string city = 7;
  string state = 8;
  string country = 9;
  string phone = 10;
}
message CreateUserResponse {
  int32 code = 1;
}

message UpdateUserRequest {
  string first_name = 1;
  string last_name = 2;
  string email = 3;
  string password = 4;
  string address1 = 5;
  string address2 = 6;
  string city = 7;
  string state = 8;
  string country = 9;
  string phone = 10;
}
message UpdateUserResponse {
  int32 code = 1;
}

message DeleteUserRequest {}
message DeleteUserResponse {
  int32 code = 1;
}

message AuthUserRequest {
  string email = 1;
  string password = 2;
}
message AuthUserResponse {
  int32 code = 1;
}